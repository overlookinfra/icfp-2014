(asm abs "math/abs.gcc")
(asm % "math/mod.gcc")
(asm > "math/gt.gcc")
(asm >= "math/gte.gcc")
(asm = "math/eq.gcc")
(asm not "math/not.gcc")
(asm distance "distance.gcc")
(asm nth "nth.gcc")

(pos? [x]
  (> x 0))

(neg? [x]
  (< x 0))

(zero? [x]
  (= x 0))

(<= [x y]
  (>= y x))

(< [x y]
  (> y x))

(!= [x y]
  (not (= x y)))

(false? [val]
  (= val false))

(true? [val]
  (not (false? val)))

(empty? [val]
  (if (atom? val)
    (zero? val)
    false))

(pill? [cell]
  ;; "+ is or" -- branan
  (+ (= cell 2) (= cell 3)))

(whereami [world]
  (nth (nth world 1) 1))

(make-coord [x y]
  (cons x y))

(to-the [dir coord]
  (cond
    (= dir up)
    (make-coord (x coord) (dec (y coord)))

    (= dir right)
    (make-coord (inc (x coord)) (y coord))

    (= dir down)
    (make-coord (x coord) (inc (y coord)))

    (= dir left)
    (make-coord (dec (x coord)) (y coord))))

(filter [pred coll]
  (if (empty? coll)
    coll
    (if (pred (car coll))
      (cons (car coll) (filter pred (cdr coll)))
      (filter pred (cdr coll)))))

(map [func coll]
  (if (empty? coll)
    coll
    (cons (func (car coll)) (map func (cdr coll)))))

(get-in [indexes lst]
  (def current (nth lst (car indexes)))
  (if (empty? (cdr indexes))
    current
    (get-in (cdr indexes) current)))

(find-pill [world-map coord]
  (def points [(to-the up coord)
               (to-the right coord)
               (to-the down coord)
               (to-the left coord)])

  (def point-contents (foreach [point points]
			       (look-at world-map point)))
  (def pill-locs (filter pill? point-contents))

  (if (empty? pill-locs)
    left
    (car pill-locs)))

(x [coord]
  (col coord))

(y [coord]
  (row coord))

(row [coord]
  (cdr coord))

(col [coord]
  (car coord))

(world-map [world]
  (car world))

(look-at [world-map coord]
  (nth (nth world-map (row coord)) (col coord)))

(step [state world]
  (def pill-location (find-pill (world-map world) (whereami world)))
  (def dir (if (neg? pill-location)
             up
             pill-location))
  '(state dir))
