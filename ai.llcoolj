(look-for
  [thing coord distance]
  (let [contents (look-at coord)]
    (if (= 0 contents)
      0
      (if (* (= thing contents) (not (contains? (ghost-locs game-world) coord)))
        coord
        (if (> distance 0)
          (let [leftward (look-for thing (to-the left coord) (dec distance))]
            (if (atom? leftward)
              (let [downward (look-for thing (to-the down coord) (dec distance))]
                (if (atom? downward)
                  (let [rightward (look-for thing (to-the right coord) (dec distance))]
                    (if (atom? rightward)
                      (let [upward (look-for thing (to-the up coord) (dec distance))]
                        (if (atom? upward)
                          0
                          upward))
                      rightward))
                  downward))
              leftward))
          0)))))

(find-nearby-pills
  [dirs coord distance]
  (filter (lambda [dir] (pill? (look-to-the dir coord distance))) dirs))

(find-pills
  [dirs]
  (let [near-pills (find-nearby-pills dirs lman-coord 1)]
    (if (empty? near-pills)
      (let [near-pills (find-nearby-pills dirs lman-coord 2)]
        (if (empty? near-pills)
          (let [near-pills (find-nearby-pills dirs lman-coord 3)]
            (if (empty? near-pills)
              (find-nearby-pills dirs lman-coord 4)
              near-pills))
          near-pills))
      near-pills)))

(find-power-pills
  [map]
  (let [collect-row-pills
        (fn* [acc row y]
             (reduce-with-index
               (fn* [acc cell x]
                    (if (power-pill? cell)
                       (cons '(x y) acc)
                       acc))
               acc
               row))]
    (reduce-with-index collect-row-pills [] map)))

(find-fruit-row*
  [row x]
  (if (empty? row)
    -1
    (if (= 4 (car row))
      x
      (find-fruit-row* (cdr row) (inc x)))))

(find-fruit*
  [map y]
  (let [row (nth map y)
        x (find-fruit-row* row 0)]
    (if (= -1 x)
      (find-fruit* map (inc y))
      '(x y))))

(find-fruit
  [map]
  (find-fruit* map 0))

(nearest-power-pill
  [power-pills coord]
  (if (empty? power-pills)
    0
    (min (filter #(not (contains? (ghost-locs game-world) %)) power-pills) #(distance coord %))))

(nearest-ghost
  [ghosts coord]
  (let [living-ghosts (filter #(not (= (car %) 2)) ghosts)]
    (if (empty? living-ghosts)
      0
      (-> (map #(nth % 1) living-ghosts )
          (min #(distance coord %))))))

(available-moves
  [dirs coord]
  (->> dirs
       (filter #(movable? (look-to-the % coord 1)))))

(map-get
  [m k default]
  (if (empty? m)
    default
    (let [cell (car m)]
      (if (= (car cell) k)
        (cdr cell)
        (map-get (cdr m) k default)))))

(map-set
  [m k v]
  (if (empty? m)
    (cons (cons k v) 0)
    (let [cell (car m)]
      (if (= (car cell) k)
        (cons (cons k v) (cdr m))
        (cons cell (map-set (cdr m) k v))))))

(contains?
  [coll key]
  (if (empty? coll)
    false
    (if (= (car coll) key)
      true
      (contains? (cdr coll) key))))

(set-insert
  [set item]
  (if (contains? set item)
    set
    (cons item set)))

(set-delete
  [set item]
  (if (empty? set)
    set
    (if (= (car set) item)
      (cdr set)
      (cons (car set) (set-delete (cdr set) item)))))

(prioritized-moves
  [start goal]
  (let [start-x (x start)
        start-y (y start)
        goal-x (x goal)
        goal-y (y goal)]

    (cond
      (* (<= start-x goal-x) (<= start-y goal-y))
      [right down left up]

      (* (<= start-x goal-x) (> start-y goal-y))
      [right up left down]

      (* (> start-x goal-x) (<= start-y goal-y))
      [left down right up]

      (* (> start-x goal-x) (> start-y goal-y))
      [left up right down])))

(neighbor-nodes
  [coord goal]
  (foreach [move (available-moves (prioritized-moves coord goal) coord)]
            (to-the move coord)))

(min*
  [l f best best-cost]
  (if (empty? l)
    best
    (let [cur (car l)
          cur-cost (f cur)]
      (if (< cur-cost best-cost)
        (min* (cdr l) f cur cur-cost)
        (min* (cdr l) f best best-cost)))))

(min
  [l f]
  (min* (cdr l) f (car l) (f (car l))))

;; while openset is not empty
;;     current := the node in openset having the lowest f_score[] value
;;     if current = goal
;;         return reconstruct_path(came_from, goal)

;;     remove current from openset !!!
;;     add current to closedset
;;     for each neighbor in neighbor_nodes(current)
;;         if neighbor in closedset
;;             continue
;;         tentative_g_score := g_score[current] + dist_between(current,neighbor)

;;         if neighbor not in openset or tentative_g_score < g_score[neighbor]
;;             came_from[neighbor] := current
;;             g_score[neighbor] := tentative_g_score
;;             f_score[neighbor] := g_score[neighbor] + heuristic_cost_estimate(neighbor, goal)
;;             if neighbor not in openset
;;                 add neighbor to openset
;; g = constantly 1
;; h = manhattan distance
(reconstruct-path
  [came-from node]
  (let [node-came-from (map-get came-from node 0)]
    (if (not (atom? node-came-from))
      (append (reconstruct-path came-from node-came-from) [node])
      [node])))

(update-neighbors
  [current goal neighbors f-score g-score current-g-score open closed came-from]
  (if (empty? neighbors)
    [f-score g-score open closed came-from]
    (let [neighbor (car neighbors)
          tentative-score (+ current-g-score (g current neighbor))]
      (if (+ (not (contains? open neighbor)) (< tentative-score (map-get g-score neighbor 0)))
        (let [new-came-from (map-set came-from neighbor current)
              new-g-score (map-set g-score neighbor tentative-score)
              new-f-score (map-set f-score neighbor (+ tentative-score (h neighbor goal)))
              new-open (set-insert open neighbor)]
          (update-neighbors current goal (cdr neighbors) new-f-score new-g-score current-g-score new-open closed new-came-from))
        (update-neighbors current goal (cdr neighbors) f-score g-score current-g-score open closed came-from)))))

(a**
  [goal f-score g-score open closed came-from]
  (if (not (empty? open))
    (let [current (min open #(map-get f-score % 0))]
      (if (= current goal)
        (reconstruct-path came-from goal)
        (let [neighbors (->> (neighbor-nodes current goal)
                             (filter #(not (contains? closed %))))
              current-g-score (map-get g-score current 0)]
          (let [results (update-neighbors current goal neighbors f-score g-score current-g-score (set-delete open current) (set-insert closed current) came-from)
                new-f-score (nth results 0)
                new-g-score (nth results 1)
                new-open (nth results 2)
                new-closed (nth results 3)
                new-came-from (nth results 4)]
            (a** goal new-f-score new-g-score new-open new-closed new-came-from)))))
    []))

(a*
  [start goal]
  (let [closed []
        open [start]
        came-from {}
        g-score {start 0}
        f-score {start (+ (map-get g-score start 0) (h start goal))}]
    (let [plan (a** goal f-score g-score open closed came-from)]
      (if (empty? plan)
        [(to-the right start)]
        plan))))

(ghost-locs
  [world]
  (->> (nth world 2)
       (filter #(= (car %) 0))
       (map #(nth % 1))) )

(wander
  [last-square world]
  (let [open-spaces (->> lman-coord
                         (available-moves [left down right up])
                         (map #(to-the % lman-coord))
                         (filter #(not (contains? (ghost-locs world) %))))
        unique-open-spaces (filter #(not (= last-square %)) open-spaces)]
    (if (empty? unique-open-spaces)
      (car open-spaces)
      (car unique-open-spaces))))

(which-way-is
  [other me]
  (let [my-x (x me)
        my-y (y me)
        other-x (x other)
        other-y (y other)]
    (cond
      (< my-x other-x)
      right

      (> my-x other-x)
      left

      (< my-y other-y)
      down

      (> my-y other-y)
      up)))

(tile-cost
  [curr neighbor]
  (let [tile (look-at neighbor)
        ghost-locs (->> (nth game-world 2)
                        (filter #(= (car %) 0))
                        (map #(nth % 1)))]
    ;; ghosts are expensive if we're not in ghost-hunting mode
    (if (contains? ghost-locs neighbor)
      (let [ghost-distance (distance lman-coord neighbor)
            ghost-cost (if (> ghost-distance 5) 0 (- 5 ghost-distance))]
        (* ghost-cost ghost-cost ghost-cost ghost-cost))
      ;; pills, power pills, and fruit are cheaper
      ;; than empty tiles
      (if (+ (= tile 2) (= tile 3) (= tile 4))
        1
        2))))

(init
  [world ghost-ai]
  ;;#####
  ;;#...#
  ;;#.#.#
  ;;#..\#
  ;;#####
  ;;
  (def game-world world)
  (let [game-map [[0 0 0 0 0]
                  [0 3 3 3 0]
                  [0 1 0 1 0]
                  [0 1 1 1 0]
                  [0 0 0 0 0]]]
  (let [power-pills (find-power-pills (world-map world))
        goal (nearest-power-pill power-pills (whereami world))
        fruit (find-fruit (world-map world))]
    ;; goal, power-pills, fruit, panic-mode
    [goal power-pills fruit '(0 0)])))

(ghost-goal
  [ai-state world]
  (if (> (get-in [1 0] world) 0)
    (nearest-ghost (nth world 2) lman-coord)))

(pill-goal
  [ai-state world]
  (let [pills (find-pills [up right down left])]
    (if (atom? pills)
      (let [nearby-pill (look-for 2 lman-coord 4)]
        (if (not (atom? nearby-pill))
          nearby-pill))
      (to-the (car pills) lman-coord))))

(goal
  [ai-state world]
  (let [current-goal (nth ai-state 0)
        power-pills (nth ai-state 1)
        fruit (nth ai-state 2)
        fruit-status (cdr (cdr (cdr world)))
        last-square (nth ai-state 3)
        ghost (debug (ghost-goal ai-state world))]
    (if (atom? ghost)
      (if (* fruit-status (not (contains? (ghost-locs world) fruit)))
        fruit
        (let [power-pill (nearest-power-pill power-pills lman-coord)]
          (if (atom? power-pill)
            (let [pill (pill-goal ai-state world)]
              (if (atom? pill)
                (wander last-square world)
                pill))
            power-pill)))
      ghost)))

(step
  [ai-state world]
  (def game-map (world-map world))
  (def game-world world)
  (def lman-coord (whereami world))
  (def g tile-cost)
  (def h #(* 2 (distance %1 %2)))

  (let [current-goal (nth ai-state 0)
        power-pills (nth ai-state 1)
        fruit (nth ai-state 2)
        last-square (debug (nth ai-state 3))
        new-power-pills (set-delete power-pills lman-coord)
        new-goal (goal [current-goal new-power-pills fruit last-square] world) ]
    (let [new-ai-state [new-goal new-power-pills fruit lman-coord]
          path (a* lman-coord new-goal)
          next-square (nth path 1)
          dir (which-way-is next-square lman-coord)]
      '(new-ai-state dir))))
