(asm abs "math/abs.gcc")
(asm % "math/mod.gcc")
(asm > "math/gt.gcc")
(asm >= "math/gte.gcc")
(asm = "math/eq.gcc")
(asm not "math/not.gcc")
(asm distance "distance.gcc")
(asm nth "nth.gcc")

(pos? [x]
  (> x 0))

(neg? [x]
  (< x 0))

(zero? [x]
  (= x 0))

(<= [x y]
  (>= y x))

(< [x y]
  (> y x))

(!= [x y]
  (not (= x y)))

(false? [val]
  (= val false))

(true? [val]
  (not (false? val)))

(pill? [cell]
  (= cell 2))

(whereami [world]
  (nth (nth world 1) 1))

(make-coord [x y]
  (cons x y))

(to-the [dir coord]
  (cond
    (= dir up)
    (make-coord (x coord) (dec (y coord)))

    (= dir right)
    (make-coord (inc (x coord)) (y coord))

    (= dir down)
    (make-coord (x coord) (inc (y coord)))

    (= dir left)
    (make-coord (dec (x coord)) (y coord))))

(find-pill [world-map coord]
  (cond
    (pill? (to-the up coord)) up
    (pill? (to-the right coord)) right
    (pill? (to-the down coord)) down
    (pill? (to-the left coord)) left
    true -1))

(goto-pill [dir default-dir]
  (if (neg? dir)
    default-dir
    dir))

(x [coord]
  (col coord))

(y [coord]
  (row coord))

(row [coord]
  (cdr coord))

(col [coord]
  (car coord))

(world-map [world]
  (car world))

(look-at [world coord]
  (nth (nth (world-map world) (row coord)) (col coord)))

(step [state world]
  '(state (goto-pill (find-pill (world-map world) (whereami world)) up)))
