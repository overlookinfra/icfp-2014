(find-nearby-pills
  [dirs coord distance]
  (filter (lambda [dir] (pill? (look-to-the dir coord distance))) dirs))

(find-pills
  [dirs]
  (def near-pills (find-nearby-pills dirs lman-coord 1))
  (if (empty? near-pills)
    (find-nearby-pills dirs lman-coord 2)
    near-pills))

(available-moves
  [dirs]
  ;; Check in opposite order of pills to maximize odds of finding a pill
  (->> dirs
       (filter #(movable? (look-to-the % lman-coord 1)))))

(map-get
  [m k default]
  (if (empty? m)
    default
    (let [cell (car m)]
      (if (= (car cell) k)
        (cdr cell)
        (map-get (cdr m) k default)))))

(map-set
  [m k v]
  (if (empty? m)
    (cons (cons k v) 0)
    (let [cell (car m)]
      (if (= (car cell) k)
        (cons (cons k v) (cdr m))
        (cons cell (map-set (cdr m) k v))))))

(contains?
  [coll key]
  (if (empty? coll)
    false
    (if (= (car coll) key)
      true
      (contains? (cdr coll) key))))

(set-insert
  [set item]
  (if (contains? set item)
    set
    (cons item set)))

(set-delete
  [set item]
  (if (empty? set)
    set
    (if (= (car set) item)
      (cdr set)
      (set-delete (cdr set) item))))

(next-move
  [last-square world]
  (let [pills (find-pills [up right down left])
        open-spaces (available-moves [left down right up])
        unique-open-spaces (filter #(not (coord= (to-the % lman-coord) last-square)) open-spaces)]
    (if (empty? pills)
      (if (empty? unique-open-spaces)
        (car open-spaces)
        (car unique-open-spaces))
      (car pills))))

(step
  [last-square world]
  (def map (world-map world))
  (def lman-coord (whereami world))

  '(lman-coord (next-move last-square world)))
