(find-nearby-pills
  [dirs coord distance]
  (filter (lambda [dir] (pill? (look-to-the dir coord distance))) dirs))

(find-pills
  [dirs]
  (def near-pills (find-nearby-pills dirs lman-coord 1))
  (if (empty? near-pills)
    (find-nearby-pills dirs lman-coord 2)
    near-pills))

(available-moves
  [dirs]
  ;; Check in opposite order of pills to maximize odds of finding a pill
  (->> dirs
       (filter #(movable? (look-to-the % lman-coord 1)))))

(step
  [last-square world]
  (def map (world-map world))
  (def lman-coord (whereami world))
  (def pills (find-pills [up right down left]))
  (def open-spaces (available-moves [left down right up]))
  (def unique-open-spaces (filter #(not (coord= (to-the % lman-coord) last-square)) open-spaces))

  (def next-move (if (empty? pills)
                   (if (empty? unique-open-spaces)
                     (car open-spaces)
                     (car unique-open-spaces))
                   (car pills)))

  '(lman-coord next-move))
