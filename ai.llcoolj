(find-nearby-pills
  [dirs coord distance]
  (filter (lambda [dir] (pill? (look-to-the dir coord distance))) dirs))

(find-pills
  [dirs]
  (def near-pills (find-nearby-pills dirs lman-coord 1))
  (if (empty? near-pills)
    (find-nearby-pills dirs lman-coord 2)
    near-pills))

(available-moves
  [dirs]
  ;; Check in opposite order of pills to maximize odds of finding a pill
  (->> dirs
       (filter #(movable? (look-to-the % lman-coord 1)))))

(next-move
  [last-square world]
  (let [pills (find-pills [up right down left])
        open-spaces (available-moves [left down right up])
        unique-open-spaces (filter #(not (coord= (to-the % lman-coord) last-square)) open-spaces)]
    (if (empty? pills)
      (if (empty? unique-open-spaces)
        (car open-spaces)
        (car unique-open-spaces))
      (car pills))))

(step
  [last-square world]
  (def map (world-map world))
  (def lman-coord (whereami world))

  '(lman-coord (next-move last-square world)))
