(asm abs "math/abs.gcc")
(asm % "math/mod.gcc")
(asm > "math/gt.gcc")
(asm >= "math/gte.gcc")
(asm eq "math/eq.gcc")
(asm not "math/not.gcc")
#_(asm distance "math/distance.gcc")
(asm nth "math/nth.gcc")

(pos? [x]
  (> x 0))

(neg? [x]
  (< x 0))

(zero? [x]
  (= x 0))

(<= [x y]
  (>= y x))

(< [x y]
  (> y x))

(!= [x y]
  (not (= x y)))

(= [x y]
 (if (atom? x)
  (eq x y)
  (pair= x y)))

(distance
 [a b]
 (let [x1 (car a)
       y1 (cdr a)
       x2 (car b)
       y2 (cdr b)]
   (+ (abs (- x1 x2))
      (abs (- y1 y2)))))

(pair=
  [a b]
  (* (eq (car a) (car b))
     (eq (cdr a) (cdr b))))

(false? [val]
  (= val false))

(true? [val]
  (not (false? val)))
